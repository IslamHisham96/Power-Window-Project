<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\freertos_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\freertos_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed May 30 23:07:01 2018
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[28]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[77]">vApplicationStackOverflowHook</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">vApplicationStackOverflowHook</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
 <LI><a href="#[27]">prvIdleTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">prvIdleTask</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 111 times from startup_rvmdk.o(RESET)
 <LI><a href="#[25]">Limit_Handler</a> from freertos_demo.o(i.Limit_Handler) referenced from freertos_demo.o(i.main)
 <LI><a href="#[1]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[28]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[24]">Window_Handler</a> from freertos_demo.o(i.Window_Handler) referenced from freertos_demo.o(i.main)
 <LI><a href="#[18]">autoDriverDownSM</a> from statemachinesfunctions.o(i.autoDriverDownSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[17]">autoDriverUpSM</a> from statemachinesfunctions.o(i.autoDriverUpSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[1a]">autoPassengerDownSM</a> from statemachinesfunctions.o(i.autoPassengerDownSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[19]">autoPassengerUpSM</a> from statemachinesfunctions.o(i.autoPassengerUpSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[21]">autoTimerHandler</a> from freertos_demo.o(i.autoTimerHandler) referenced from freertos_demo.o(i.main)
 <LI><a href="#[1c]">deadSM</a> from statemachinesfunctions.o(i.deadSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[c]">driverDownSM</a> from statemachinesfunctions.o(i.driverDownSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[9]">driverNeutralSM</a> from statemachinesfunctions.o(i.driverNeutralSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[d]">driverUpSM</a> from statemachinesfunctions.o(i.driverUpSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[1b]">dyingSM</a> from statemachinesfunctions.o(i.dyingSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[16]">emergencyDownSM</a> from statemachinesfunctions.o(i.emergencyDownSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[23]">engineTimerHandler</a> from freertos_demo.o(i.engineTimerHandler) referenced from freertos_demo.o(i.main)
 <LI><a href="#[12]">iniDriverDownSM</a> from statemachinesfunctions.o(i.iniDriverDownSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[14]">iniDriverUpSM</a> from statemachinesfunctions.o(i.iniDriverUpSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[f]">iniPassengerDownSM</a> from statemachinesfunctions.o(i.iniPassengerDownSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[7]">main</a> from freertos_demo.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[13]">manualDriverDownSM</a> from statemachinesfunctions.o(i.manualDriverDownSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[15]">manualDriverUpSM</a> from statemachinesfunctions.o(i.manualDriverUpSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[10]">manualPassengerDownSM</a> from statemachinesfunctions.o(i.manualPassengerDownSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[11]">manualPassengerUpSM</a> from statemachinesfunctions.o(i.manualPassengerUpSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[22]">obstacleTimerHandler</a> from freertos_demo.o(i.obstacleTimerHandler) referenced from freertos_demo.o(i.main)
 <LI><a href="#[a]">passengerDownSM</a> from statemachinesfunctions.o(i.passengerDownSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[e]">passengerNeutralSM</a> from statemachinesfunctions.o(i.passengerNeutralSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[b]">passengerUpSM</a> from statemachinesfunctions.o(i.passengerUpSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[27]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[26]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[8]">safeSM</a> from statemachinesfunctions.o(i.safeSM) referenced from freertos_demo.o(i.main)
 <LI><a href="#[1f]">vFastStopHandlerTask</a> from taskhandlers.o(i.vFastStopHandlerTask) referenced from freertos_demo.o(i.main)
 <LI><a href="#[20]">vMainHandlerTask</a> from taskhandlers.o(i.vMainHandlerTask) referenced from freertos_demo.o(i.main)
 <LI><a href="#[4]">vPortSVCHandler</a> from port.o(.emb_text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1e]">vTurnLeftHandlerTask</a> from taskhandlers.o(i.vTurnLeftHandlerTask) referenced from freertos_demo.o(i.main)
 <LI><a href="#[1d]">vTurnRightHandlerTask</a> from taskhandlers.o(i.vTurnRightHandlerTask) referenced from freertos_demo.o(i.main)
 <LI><a href="#[5]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">xPortSysTickHandler</a> from port.o(i.xPortSysTickHandler) referenced from startup_rvmdk.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[89]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[30]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[8b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[8c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[8d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[8e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>vPortSVCHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[7e]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[5]"></a>xPortPendSVHandler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortPendSVHandler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[50]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>ConfigureUART</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, freertos_demo.o(i.ConfigureUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConfigureUART &rArr; UARTStdioConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClockSourceSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[45]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portc_int
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;porta_int
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Handler
</UL>

<P><STRONG><a name="[60]"></a>GPIOIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portc_int
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;porta_int
</UL>

<P><STRONG><a name="[62]"></a>GPIOIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portc_int
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;porta_int
</UL>

<P><STRONG><a name="[34]"></a>GPIOIntRegister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gpio.o(i.GPIOIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GPIOIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portc_int
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;porta_int
</UL>

<P><STRONG><a name="[44]"></a>GPIOIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Handler
</UL>

<P><STRONG><a name="[61]"></a>GPIOIntTypeSet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portc_int
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;porta_int
</UL>

<P><STRONG><a name="[3a]"></a>GPIOPadConfigSet</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[4a]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window_Handler
</UL>

<P><STRONG><a name="[38]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_input
</UL>

<P><STRONG><a name="[3b]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_output
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LCD_output
</UL>

<P><STRONG><a name="[41]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnRight
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnLeft
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_output
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastStop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nibble_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable
</UL>

<P><STRONG><a name="[37]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
</UL>

<P><STRONG><a name="[36]"></a>IntRegister</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interrupt.o(i.IntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
</UL>

<P><STRONG><a name="[3c]"></a>LCD_command</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(i.LCD_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_command &rArr; LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nibble_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>

<P><STRONG><a name="[40]"></a>LCD_data</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd.o(i.LCD_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_data &rArr; LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nibble_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>

<P><STRONG><a name="[3d]"></a>LCD_nibble_write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lcd.o(i.LCD_nibble_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_command
</UL>

<P><STRONG><a name="[25]"></a>Limit_Handler</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, freertos_demo.o(i.Limit_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Limit_Handler &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[59]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_input
</UL>

<P><STRONG><a name="[57]"></a>SysCtlPeripheralReady</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralReady))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_output
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_input
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LCD_output
</UL>

<P><STRONG><a name="[47]"></a>TimerIntRegister</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer.o(i.TimerIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureObstacleTimer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureEngineTimer
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAutoTimer
</UL>

<P><STRONG><a name="[32]"></a>UARTClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART
</UL>

<P><STRONG><a name="[33]"></a>UARTStdioConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART
</UL>

<P><STRONG><a name="[43]"></a>UARTprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, uartstdio.o(i.UARTprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obstacleTimerHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineTimerHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoTimerHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Handler
</UL>

<P><STRONG><a name="[48]"></a>UARTvprintf</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, uartstdio.o(i.UARTvprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>

<P><STRONG><a name="[49]"></a>UARTwrite</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uartstdio.o(i.UARTwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
</UL>

<P><STRONG><a name="[24]"></a>Window_Handler</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, freertos_demo.o(i.Window_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Window_Handler &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[99]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[18]"></a>autoDriverDownSM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, statemachinesfunctions.o(i.autoDriverDownSM))
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[17]"></a>autoDriverUpSM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, statemachinesfunctions.o(i.autoDriverUpSM))
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[1a]"></a>autoPassengerDownSM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, statemachinesfunctions.o(i.autoPassengerDownSM))
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[19]"></a>autoPassengerUpSM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, statemachinesfunctions.o(i.autoPassengerUpSM))
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[21]"></a>autoTimerHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, freertos_demo.o(i.autoTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = autoTimerHandler &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[4b]"></a>clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_state.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = clear &rArr; LCD_command &rArr; LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_command
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>

<P><STRONG><a name="[4c]"></a>configureAutoTimer</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, timers.o(i.configureAutoTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = configureAutoTimer &rArr; TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>configureEngineTimer</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, timers.o(i.configureEngineTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = configureEngineTimer &rArr; TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>configureObstacleTimer</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, timers.o(i.configureObstacleTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = configureObstacleTimer &rArr; TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>deadSM</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, statemachinesfunctions.o(i.deadSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = deadSM &rArr; displayString &rArr; clear &rArr; LCD_command &rArr; LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[3e]"></a>delayMs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, delay.o(i.delayMs))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_command
</UL>

<P><STRONG><a name="[3f]"></a>delayUs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, delay.o(i.delayUs))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureObstacleTimer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureEngineTimer
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAutoTimer
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_nibble_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_command
</UL>

<P><STRONG><a name="[4f]"></a>displayString</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcd_state.o(i.displayString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = displayString &rArr; clear &rArr; LCD_command &rArr; LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_data
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_command
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeSM
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passengerUpSM
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passengerNeutralSM
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passengerDownSM
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualPassengerUpSM
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualPassengerDownSM
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualDriverUpSM
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualDriverDownSM
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniPassengerDownSM
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniDriverUpSM
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniDriverDownSM
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyDownSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyingSM
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverUpSM
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverNeutralSM
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverDownSM
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deadSM
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>driverDownSM</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, statemachinesfunctions.o(i.driverDownSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driverDownSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[9]"></a>driverNeutralSM</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, statemachinesfunctions.o(i.driverNeutralSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driverNeutralSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAutoTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[d]"></a>driverUpSM</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, statemachinesfunctions.o(i.driverUpSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driverUpSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableObstacleTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[1b]"></a>dyingSM</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, statemachinesfunctions.o(i.dyingSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dyingSM &rArr; displayString &rArr; clear &rArr; LCD_command &rArr; LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[16]"></a>emergencyDownSM</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, statemachinesfunctions.o(i.emergencyDownSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = emergencyDownSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[54]"></a>enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, output_ports.o(i.enable))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnRight
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnLeft
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastStop
</UL>

<P><STRONG><a name="[52]"></a>enableAutoTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.enableAutoTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enableAutoTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passengerNeutralSM
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverNeutralSM
</UL>

<P><STRONG><a name="[74]"></a>enableEngineTimer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(i.enableEngineTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enableEngineTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeSM
</UL>

<P><STRONG><a name="[53]"></a>enableObstacleTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.enableObstacleTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enableObstacleTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passengerUpSM
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverUpSM
</UL>

<P><STRONG><a name="[23]"></a>engineTimerHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, freertos_demo.o(i.engineTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = engineTimerHandler &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[55]"></a>fastStop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, output_ports.o(i.fastStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fastStop
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFastStopHandlerTask
</UL>

<P><STRONG><a name="[12]"></a>iniDriverDownSM</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, statemachinesfunctions.o(i.iniDriverDownSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iniDriverDownSM &rArr; displayString &rArr; clear &rArr; LCD_command &rArr; LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[14]"></a>iniDriverUpSM</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, statemachinesfunctions.o(i.iniDriverUpSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iniDriverUpSM &rArr; displayString &rArr; clear &rArr; LCD_command &rArr; LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[f]"></a>iniPassengerDownSM</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, statemachinesfunctions.o(i.iniPassengerDownSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iniPassengerDownSM &rArr; displayString &rArr; clear &rArr; LCD_command &rArr; LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[56]"></a>init_LCD_output</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcd_state.o(i.init_LCD_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = init_LCD_output &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>init_input</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, inputs.o(i.init_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = init_input &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>init_output</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, output_ports.o(i.init_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = init_output &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>main</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, freertos_demo.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portc_int
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;porta_int
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_output
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_input
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LCD_output
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureObstacleTimer
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureEngineTimer
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureAutoTimer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[13]"></a>manualDriverDownSM</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, statemachinesfunctions.o(i.manualDriverDownSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = manualDriverDownSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[15]"></a>manualDriverUpSM</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, statemachinesfunctions.o(i.manualDriverUpSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = manualDriverUpSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[10]"></a>manualPassengerDownSM</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, statemachinesfunctions.o(i.manualPassengerDownSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = manualPassengerDownSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[11]"></a>manualPassengerUpSM</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, statemachinesfunctions.o(i.manualPassengerUpSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = manualPassengerUpSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[22]"></a>obstacleTimerHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, freertos_demo.o(i.obstacleTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = obstacleTimerHandler &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[a]"></a>passengerDownSM</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, statemachinesfunctions.o(i.passengerDownSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = passengerDownSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[e]"></a>passengerNeutralSM</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, statemachinesfunctions.o(i.passengerNeutralSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = passengerNeutralSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAutoTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[b]"></a>passengerUpSM</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, statemachinesfunctions.o(i.passengerUpSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = passengerUpSM &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableObstacleTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[5d]"></a>porta_int</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, inputs.o(i.porta_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = porta_int &rArr; GPIOIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>portc_int</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, inputs.o(i.portc_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = portc_int &rArr; GPIOIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>pvPortMalloc</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[82]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[87]"></a>pxPortInitialiseStack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[8]"></a>safeSM</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, statemachinesfunctions.o(i.safeSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = safeSM &rArr; displayString &rArr; clear &rArr; LCD_command &rArr; LCD_nibble_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayString
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableEngineTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[75]"></a>turnLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, output_ports.o(i.turnLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = turnLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTurnLeftHandlerTask
</UL>

<P><STRONG><a name="[76]"></a>turnRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, output_ports.o(i.turnRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = turnRight
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTurnRightHandlerTask
</UL>

<P><STRONG><a name="[69]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[77]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos_demo.o(i.vApplicationStackOverflowHook))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>

<P><STRONG><a name="[1f]"></a>vFastStopHandlerTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, taskhandlers.o(i.vFastStopHandlerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vFastStopHandlerTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[85]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[86]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[64]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[7a]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[20]"></a>vMainHandlerTask</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, taskhandlers.o(i.vMainHandlerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vMainHandlerTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[68]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[6a]"></a>vPortExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[6b]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[7d]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[72]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[79]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[7b]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[83]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[5f]"></a>vTaskStartScheduler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[2c]"></a>vTaskSwitchContext</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[1e]"></a>vTurnLeftHandlerTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, taskhandlers.o(i.vTurnLeftHandlerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vTurnLeftHandlerTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[1d]"></a>vTurnRightHandlerTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, taskhandlers.o(i.vTurnRightHandlerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vTurnRightHandlerTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.main)
</UL>
<P><STRONG><a name="[7c]"></a>xPortStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[6]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>xQueueGenericCreate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>xQueueGenericReceive</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTurnRightHandlerTask
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTurnLeftHandlerTask
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMainHandlerTask
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFastStopHandlerTask
</UL>

<P><STRONG><a name="[81]"></a>xQueueGenericReset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[51]"></a>xQueueGenericSend</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passengerUpSM
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passengerNeutralSM
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passengerDownSM
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualPassengerUpSM
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualPassengerDownSM
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualDriverUpSM
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manualDriverDownSM
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyDownSM
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverUpSM
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverNeutralSM
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverDownSM
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obstacleTimerHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineTimerHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoTimerHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Handler
</UL>

<P><STRONG><a name="[84]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[5c]"></a>xTaskGenericCreate</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Window_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Handler
</UL>

<P><STRONG><a name="[80]"></a>xTaskIncrementTick</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[6f]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[71]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[67]"></a>xTaskResumeAll</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[26]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[6c]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6e]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[70]"></a>prvUnlockQueue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[65]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[27]"></a>prvIdleTask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = prvIdleTask &rArr;  prvIdleTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[88]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[35]"></a>_GPIOIntNumberGet</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gpio.o(i._GPIOIntNumberGet))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
